Thursday (10/8/20)
https://github.com/goopey7/blockchain/commit/c6a0b647f032af334ab85ed29f7c87d8808a1e98
Created the Block and Blockchain classes. Implemented Getters and Setters.

Friday (10/16/20)
https://github.com/goopey7/blockchain/commit/7919dcca8d5b04dbd559ee260eee62dbc0476937

I successfully created my own linked list header file. This is going to be the data structure that my blockchain class
will take advantage of.

Also, I think I'm going to apply my blockchain to fundraising for video games. My blockchain tech can be used to verify
ownership of digital items purchased through the platform.

Tuesday (10/20/20)
https://github.com/goopey7/blockchain/commit/47774a9e4aad88aa8b44689f61ee292827a8af8d
https://github.com/goopey7/blockchain/commit/5c4e8869a9fbf3ceda1533018023b8f42ab5294e
Implemented more functions for the blockchain class. And also looked into making my project decentralized with sockets.
So the idea is that I'd host a server whose only purpose is to allow clients to communicate with each other. The server
does not have authority over the canonical state of the blockchain. So I am reviewing sockets in C++ since the last time
I played with them was about a year ago when I made a reverse shell program in C++ and once it worked I forgot about how
to implement sockets. Added functions for adding blocks to the blockchain, mining blocks, validating the chain.

I guess the way server-client interactions will work is that everytime we boot up a client or a client modifies the
chain, we then request to look at the server's copy of the chain. If the client's copy of the chain is validated by
at least a certain amount of peers, then the server rewrites its copy of the blockchain and distributes the changes
to the clients. Also every time we boot up a client we will have to check if the server has more blocks than the client.
If so, then the client must retrieve the server's blockchain and rewrite its own.

Looks like there are no issues at all with the leading zeros!

Wednesday (10/21/20)
https://github.com/goopey7/blockchain/commit/84513b5b59c3ed911222debc4a2efb9921f2b3cf
https://github.com/goopey7/blockchain/commit/94f0ec416bde307e417020b7e10d243e5b1cce4a
Added functions for reading and writing the chain to a file.

Thursday (10/22/20)
https://github.com/goopey7/blockchain/commit/e07e7db08b2b6c97577e5dba50c6b59c8e697fcf
https://github.com/goopey7/blockchain/commit/f95623fa25db1be8f89b7028cdc9a5845d3edbf1
Getting more familiar with sockets...

Tuesday (10/27/20)
https://github.com/goopey7/blockchain/commit/0e9b33a4857366421fb521db3b12f94e4dca2f8b
https://github.com/goopey7/blockchain/commit/a670270171f2df4eb5757efc8577e850cf9c0d3b
Wow I really took a break from this. Whoops. Today I spent hours working to make up for it.
Now when the client joins a server, it successfully acquires the server's copy and then compares it to its own
to see which one has the most blocks. If the client's number of blocks is less than or equal to the server's
numberOfBlocks, the client sets its own local chain equal to the one acquired from the server.

I just spent a ridiculous amount of time trying to figure out how the server would go about distributing its copy of the
blockchain to all connected clients. I was gathering a running list of ip addresses and then every 100ms pinging every
ip in the list to see if they respond. If they don't, they get removed from the list. This really messed things up since
this program is multi-threaded. And to make matters worse, I was running both the server and the client on the
same machine and I was using my private IP to connect. Since I was sending information both from server to client and
from client to server simultaneously, messages that were meant for the server were getting captured in the client and
vice versa.

So, I stopped and had a little think and just realized that it's best to not have the server directly contact the client
at all on a separate socket. This would also remove the requirement for the clients to port forward. The solution I came
up with is actually quite simple and it should work once implemented. Simply have the clients ping the server for
blockchain updates every second, and have the server send its blockchain through the same socket. Very similar to how a
TCP reverse shell attack works since the beauty of it is that the victim does not need to port forward.
This will also save me from having a reason to implement UDP hole punching which I don't see happening by Nov 3. But
it's unnecessary for this project if we are going with reverse TCP which seems like a very good idea.

I probably added a ton of substantial stuff, but I can't remember anything else right now...

I also had another idea on how my application of the blockchain could be helpful. It could really reassure the buyer in
a grey market situation. Let's say someone wanted to sell a rare in-game sword that they worked hard to get, and that
sword can be personalised by the owner, so it can have a custom name. The buyer can ask the seller to rename said sword
to something they specify. Then they can check for a block where the buyer renamed the sword, and feel a lot better
about making the transaction. The code used in this program could also be integrated directly into a C++ game engine
like Unreal Engine 4 which can also be how players can make purchases with real money (UE4 has external plugins that
would handle the real money side of things), and then once the purchase is marked as successful, the engine adds a block
to the chain. The only issue is if the purchase succeeds, but then the player immediately shuts off their computer, they
won't have their purchased item. So, probably best to have the block entry occur on the game studio's side of things.
If their game is an MMO, then they will already be using UE4 server, so just bung in my blockchain code and link it up
to their real money purchase system and that should do it. Also, when a player renames an item, that block should also
be entered from the game server, which should have authority over the canonical state of the game.
Easier said than done :)

Wednesday (10/28/20)
https://github.com/goopey7/blockchain/commit/03f6e468cae7ee71f497fe48bffebea676e63fe0
Fixed some issues with closing threads and freeing memory consumed by the blockchains stored on the client.
Works now. Also got rid of any implementations of any server to client communications.
Next, I'm going to have to get the clients to ping the server for a blockchain every 100ms or something.
Or maybe perhaps as the chain gets bigger, the rate at which the clients ping the server decreases.
So as not to overload the server.
However, while I'm testing it, it's probably never going to get too big to handle every 100ms with
a few clients connected.

Friday (10/30/20)
Had oral surgery. Removed a wisdom tooth.

Saturday (10/31/20)
https://github.com/goopey7/blockchain/commit/fe78cee99cd9bd8d7f1cb8c4042e441f44c9ef76
Requested an extension. Hopefully I'll make some progress tonight, but we'll see.
All I ended up doing was overloading the '[]' operator for my Linked List class.

Tuesday (11/3/20)
https://github.com/goopey7/blockchain/commit/bd54ff483bf7e6f8c0b6b9bb8ecd393c51e3f521
I got into my favourite university! I'll be doing Computer Games Technology at Abertay University in Sep 2021!
https://www.abertay.ac.uk/course-search/undergraduate/computer-games-technology/
Also, my client now pulls the blockchain from the server every second. And it updates its blockchain
to the server's if the client's blockchain is less than or equal to server's. The client can also add blocks
through the UI, it's very rudimentary right now. Since I don't have a class for whatever data is being stored
in my Block's. I still need to figure that out. I also need to figure out how mining will work.
Right now the person who adds the block, also mines the block. I'm not sure whether I should give other clients
the opportunity to mine blocks, but it'd mean more work for me, so for now I'm going to leave it with the creator of the
block.

Thursday (11/5/20)
https://github.com/goopey7/blockchain/commit/98858537b1ce89c8fb3397ebab050e3719775af9
Now when a client's blockchain is longer than the server's, the client sends it to the server and it gets updated.
Now I'm running into an issue where the blockchain is too large to send through a single socket. After the 5th block.
So, now I should add a delimiter to the end of all transmissions through the socket, so that the program knows when to
stop listening for a message.

Saturday (11/7/20)
https://github.com/goopey7/blockchain/commit/508b821735bc3442d2224c2c3a4b54d7258c19b6
AFTER HOURS OF DEBUGGING, my blockchain program finally works again! I tried to add a delimiter to all of my messages
sent between the client and the server, so that both the client and server know when to stop reading from the socket,
but it opened up loads of issues. For example for one specific previous hash, a new line character magically pops
somewhere in the middle of the hash. I still don't know what causes this, but my program knows that it can happen and
deals with it when it does happen. Also, I had my client correctly reading through the socket up until my delimiter,
but for the longest time, my server was closing the socket after it read 1024 bytes from the socket, and I did not
notice it for ages. Now it works correctly which means that there is no limitation on the size of our blockchain
anymore! The server can update the client, and the client can update the server! So, next thing to do for me is to spend
a bit more time on fulfilling the requirements for this project in terms of UI, error handling, comments, and the
features for modifying the blockchain.

https://github.com/goopey7/blockchain/commit/e31070a5175196dd209ff7645dc3bfc4487b5aca
Now the client grabs difficulty from the server.

If a server/client's blockchain is invalid, the stored blockchain gets truncated to the last valid block.
Hopefully there is a connected client that'll be able to quickly provide the server with the correct blockchain.

Now client's can delete block's through the UI. After deleting a block, everything after the block gets re-mined.

Sunday (11/8/20)
(2:30) After spending a fair chunk of time learning about how crypto-currencies such as bitcoin generate public and
private keys for their wallets, I ended up taking some C code off of the internet, and my project now requires the
OpenSSL library.

Implemented the inventory class and the item class. To generate the private key, the program generates entropy by adding
the nano seconds since epoch, a "randomly" generated number, and the real user ID of the calling process. That number is
then hashed using SHA256. And, that's the private key. We get the public key using ECDSA algorithm used for bitcoin.

I'm still suffering from a really annoying bug which is that weird stuff happens when I have to read from a socket again
because the message is larger than the size of the buffer. A '\n' character will just appear out of nowhere and then
my client will crash because it can't parse it correctly.

Monday (11/9/20)

I FINALLY SQUASHED THE BUG. This means that I can get rid of so much code in the parser that anticipated this weird
trickery! After a lot of debugging, I decided to ask the question on stackoverflow, and the solution to my problem
was answered in about two minutes!
https://stackoverflow.com/questions/64761140/read-from-a-socket-without-knowing-the-size-of-the-buffer/64761196
So now it doesn't matter how large the blockchain is! Well.... until we hit the max limit of our unsigned long long.
But, I'm ok with that. I never thought I'd fix it!
I've also added the current working directory as another thing that determines the private key.

So now I'm going to try and fulfill some of the requirements in the google doc and add comments

Added lots of comments and improved user experience. I'm considering removing the add block functionality since you can
add blocks by making transactions. I'll keep the delete block in there since it is required.
